/*
 * ESP32 AJAX Demo
 * Updates and Gets data from webpage without page refresh
 * https://circuits4you.com
 */

#include <WiFi.h>
#include <WiFiClient.h>
#include <WebServer.h>
#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <DHT_U.h>

#define DHTPIN 19   // Define o pino do sensor DHT22
#define DHTTYPE DHT11   // Define o tipo de sensor DHT
DHT dht(DHTPIN, DHTTYPE);

//#include <index.h>  //Web page header file

WebServer server(80);

//Enter your SSID and PASSWORD
const char* ssid = "Lau";
const char* password = "12345678";

//===============================================================
// This routine is executed when you open its IP in browser
//===============================================================
void handleRoot() {
 const char MAIN_page[] PROGMEM = R"=====(
<!DOCTYPE html>
<html>
<style>
.card{
    max-width: 400px;
    min-height: 250px;
    background: #02b875;
    padding: 30px;
    box-sizing: border-box;
    color: #FFF;
    margin:20px;
    box-shadow: 0px 2px 18px -4px rgba(0,0,0,0.75);
}
</style>
<body>

<div class="card">
  <h4>The ESP32 Update web page without refresh</h4><br>
  <h2><p>Temp:<span id="TempValue">0</span></p></h2><br>
</div>
<script>

setInterval(function() {
  // Call a function repetatively with 2 Second interval
  getData();
}, 2000); //2000mSeconds update rate

function getData() {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      document.getElementById("TempValue").innerHTML = this.responseText;
    }
  };
  xhttp.open("GET", "readTemp", true);
  xhttp.send();
}
</script>
</body>
</html>
)=====";

 String s = MAIN_page; //Read HTML contents
 server.send(200, "text/html", s); //Send web page
}
 
void handleTemp() {
  float temp = dht.readTemperature();   // Lê a temperatura do sensor
  String TempValue = String(temp);
  Serial.print("temp: ");
  Serial.print(temp);
  Serial.println("°C ");
  server.send(200, "text/plane", TempValue); //Send temp value only to client ajax request
}

/*
void handleHumi() {
  float humi = dht.readHumidity();       // Lê a humidade do sensor
  String HumiValue = String(humi);
  Serial.print("humi: ");
  Serial.print(humi);
  Serial.println("%");
  server.send(200, "text/plane", HumiValue); //Send humi value only to client ajax request
}
*/

//===============================================================
// Setup
//===============================================================

void setup(void){
  Serial.begin(115200);
  dht.begin();
  Serial.println();
  Serial.println("Booting Sketch...");

/*
//ESP32 As access point
  WiFi.mode(WIFI_AP); //Access Point mode
  WiFi.softAP(ssid, password);
*/
//ESP32 connects to your wifi -----------------------------------
  WiFi.mode(WIFI_STA); //Connectto your wifi
  WiFi.begin(ssid, password);

  Serial.println("Connecting to ");
  Serial.print(ssid);

  //Wait for WiFi to connect
  while(WiFi.waitForConnectResult() != WL_CONNECTED){      
      Serial.print(".");
    }
    
  //If connection successful show IP address in serial monitor
  Serial.println("");
  Serial.print("Connected to ");
  Serial.println(ssid);
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());  //IP address assigned to your ESP
//----------------------------------------------------------------
 
  server.on("/", handleRoot);        //This is display page
  server.on("/readTemp", handleTemp);//To get update of temp value only
  //server.on("/readHumi", handleHumi);//To get update of humi value only
 
  server.begin();                  //Start server
  Serial.println("HTTP server started");
}

//===============================================================
// This routine is executed when you open its IP in browser
//===============================================================
void loop(void){
  server.handleClient();
  delay(1);
}